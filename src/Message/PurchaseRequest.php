<?php

namespace Omnipay\RocketGate\Message;

/**
 * Class PurchaseRequest
 *
 * This class is used for making Card & Token Payment.
 *
 * ### Example
 * <code>
 * // Initialize the gateway
 * $gateway = Omnipay::create('RocketGate');
 * $gateway->initialize(array(
 *     'merchantID'       => 'XXXXXXXXXXXX',
 *     'merchantPassword' => 'XXXXXXXXXXXX',
 *     'testMode'         => true,
 * ));
 *
 * // Create a credit card object
 * $card = new CreditCard(array(
 *     'firstName'       => 'Example',
 *     'lastName'        => 'Customer',
 *     'number'          => '4242424242424242',
 *     'expiryMonth'     => '01',
 *     'expiryYear'      => '2032',
 *     'cvv'             => '123',
 *     'email'           => 'customer@example.com',
 *     'billingAddress1' => 'Mary',
 *     'billingCountry'  => 'SG',
 *     'billingCity'     => 'Singapore',
 *     'billingPostcode' => '567278',
 *     'billingState'    => 'Singapore',
 * ));
 *
 * // Do a purchase transaction on the gateway
 * $transaction = $gateway->purchase(array(
 *     'amount'      => '50.00',
 *     'currency'    => 'USD',
 *     'card'        => $card,
 *     'transactorId'  => random_int(0, 1000000000),
 *     'transactionId' => random_int(0, 1000000000),
 * ));
 *
 * $response = $transaction->send();
 * if ($response->isSuccessful()) {
 *     echo "Purchase transaction was successful!\n";
 *     $token = $response->getCardReference();
 *     $customerToken = $response->getCustomerReference();
 *     echo "Card reference = " . $token . "\n";
 *     echo "Customer reference = " . $customerToken . "\n";
 * }
 * </code>
 *
 * #### Token Payment
 *
 * To obtain a card reference (the cardReference parameter) a previous purchase
 * call must be completed successfully.  After the successful completion, check
 * the result of getCardReference() on the response:
 *
 * <code>
 * // Do a Token transaction on the gateway
 * $transaction = $gateway->purchase(array(
 *     'amount'        => '50.0',
 *     'currency'      => 'USD',
 *     'transactorId'  => random_int(0, 1000000000),
 *     'transactionId' => random_int(0, 1000000000),
 *     'cardReference' => $response->getCardReference(),
 * ));
 *
 * $response = $transaction->send();
 * if ($response->isSuccessful()) {
 *     echo "Purchase transaction was successful!\n";
 *     $sale_id = $response->getTransactionReference();
 *     echo "Transaction reference = " . $sale_id . "\n";
 * }
 * </code>
 *
 * @date      08/02/2019
 * @author    markbonnievestil (mbvestil@gmail.com)
 */
class PurchaseRequest extends AbstractRequest
{
    /**
     * @return mixed
     */
    public function getTransactorId()
    {
        return $this->getParameter('transactorId');
    }

    /**
     * @param $value
     * @return \Omnipay\Common\Message\AbstractRequest
     */
    public function setTransactorId($value)
    {
        return $this->setParameter('transactorId', $value);
    }

    /**
     * Prepare the data to be set to RocketGate's SDK
     *
     * Note : Each array key is the method name in RocketGates SDK
     *      i.e $data['MERCHANT_CUSTOMER_ID'] will set the customer id by calling
     *          SDK's GatewayRequest::MERCHANT_CUSTOMER_ID()
     *
     * @return array
     * @throws \Omnipay\Common\Exception\InvalidRequestException
     */
    public function getData()
    {
        $data = parent::getData();

        $this->validate('amount', 'currency');

        $data['AMOUNT']    = $this->getAmount();
        $data['CURRENCY']  = strtolower($this->getCurrency());
        $data['IPADDRESS'] = $this->getClientIp();

        // transaction identifier generated by the merchant website.
        if ($this->getTransactionId()) {
            $data['MERCHANT_INVOICE_ID'] = $this->getTransactionId();
        }

        // customer's identifier generated by the merchant website.
        if ($this->getTransactorId()) {
            $data['MERCHANT_CUSTOMER_ID'] = $this->getTransactorId();
        }

        if ($this->getCardReference()) {
            $data['CARD_HASH'] = $this->getCardReference();
        } else {
            $this->validate('card');
            $card = $this->getCard();

            $data['CUSTOMER_FIRSTNAME'] = $card->getFirstName();
            $data['CUSTOMER_LASTNAME']  = $card->getLastName();
            $data['EMAIL']              = $card->getEmail();
            $data['BILLING_ADDRESS']    = $card->getBillingAddress1() . ' ' . $card->getBillingAddress2();
            $data['BILLING_CITY']       = $card->getBillingCity();
            $data['BILLING_ZIPCODE']    = $card->getBillingPostcode();
            $data['BILLING_STATE']      = $card->getBillingState();
            $data['BILLING_COUNTRY']    = $card->getBillingCountry();
            $data['CARDNO']             = $card->getNumber();
            $data['CVV2']               = $card->getCvv();
            $data['EXPIRE_MONTH']       = $card->getExpiryMonth();
            $data['EXPIRE_YEAR']        = $card->getExpiryYear();

            $data['SCRUB']      = "IGNORE";
            $data['AVS_CHECK']  = "IGNORE";
            $data['CVV2_CHECK'] = "YES";
        }

        return $data;
    }

    /**
     * {@inheritdoc}
     */
    public function serviceMethod()
    {
        return 'PerformPurchase';
    }
}